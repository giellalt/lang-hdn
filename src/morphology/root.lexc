! Divvun & Giellatekno - open source grammars for UNDEFINED language
! Copyright © 2012 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@hum.uit.no or divvun@samediggi.no

! ========================================================================== !
!                Northern Haida morphological analyser
! ========================================================================== !

!! This file shows the Haida multichar symbols and initial lexica.

Multichar_Symbols  !!≈ !!!@CODE@ definitions

!! !!Analysis symbols
!! ----------------
!! The morphological analyses of wordforms of Northern Haida are presented
!! in this system in terms of following symbols.

!! (It is highly suggested to follow existing standards when adding new tags).


!! Haida has these tags for real, says Jordan.
+V	!!= * @CODE@ =
+NEGATIVE	!!= * @CODE@ =
+3rd_PERSON_PLURAL	!!= * @CODE@ =
+INTERROGATIVE	!!= * @CODE@ =
+FUTURE	!!= * @CODE@ =
+PAST	!!= * @CODE@ =
+PRESENT	!!= * @CODE@ =
+HABITUAL	!!= * @CODE@ =
+BIASED	!!= * @CODE@ =
+CERTAIN	!!= * @CODE@ =
+SIMPLE	!!= * @CODE@ =
+RELATIVE	!!= * @CODE@ =
+NON_FACTIVE	!!= * @CODE@ =
+IMMEDIATE	!!= * @CODE@ =
+VERYNEAR	!!= * @CODE@ =
+REFLEXIVE	!!= * @CODE@ =
+NEAR	!!= * @CODE@ =
+INDIRECT	!!= * @CODE@ =
+DIRECT	!!= * @CODE@ =
+SHOULD_KEEP_ON_VERBING_FOR_A_WHILE	!!= * @CODE@ =
+SHORT	!!= * @CODE@ =
+RESIGNED_OBLIGATION	!!= * @CODE@ =
+LONG	!!= * @CODE@ =
+INTENSIVE	!!= * @CODE@ =
+IMPERATIVE	!!= * @CODE@ =
+EVIDENTIAL	!!= * @CODE@ =
+COUNTERFACTUAL	!!= * @CODE@ =
+SINGULAR	!!= * @CODE@ =
+PLURAL	!!= * @CODE@ =

!! The parts-of-speech could perhaps also be (remove irrelevant):

+N	    !!= * @CODE@ =
+A	    !!= * @CODE@ =
+Adv    !!= * @CODE@ =
+Pron   !!= * @CODE@ =
+CS	    !!= * @CODE@ =
+CC	    !!= * @CODE@ =
+Adp    !!= * @CODE@ =
+Po	    !!= * @CODE@ =
+Pr	    !!= * @CODE@ =
+Interj !!= * @CODE@ =
+Pcle   !!= * @CODE@ =
+Num    !!= * @CODE@ =

+Def  !!= * @CODE@ =
+Indef !!= * @CODE@ =

!! The parts of speech are further split up into:

+Prop   !!= * @CODE@ =
+Pers   !!= * @CODE@ =
+Dem    !!= * @CODE@ =
+Interr !!= * @CODE@ =
+Refl   !!= * @CODE@ =
+Recipr !!= * @CODE@ =
+Rel    !!= * @CODE@ =
+Indef  !!= * @CODE@ =

!! The Usage extents are marked using the following tags:
 +Err/Sub     !!= * @CODE@ = Substandard forms
 +Use/-Spell  !!= * @CODE@ = Not included in speller

!! The nominals are inflected in the following Number

+Sg   !!= * @CODE@ =
+Pl   !!= * @CODE@ =

%^WS	!!=* @CODE@ = whitespace dummy, for twolc

! Abbreviated words are classified with:

+ABBR !!= * @CODE@ = Abbreviations
+ACR  !!= * @CODE@ = Acronyms


!! Special symbols are classified with:
+CLB   !!= * @CODE@ = Clause boundary symbols
+PUNCT !!= * @CODE@ = Other punctuation marks
+LEFT  !!= * @CODE@ = Left part of paired symbols
+RIGHT !!= * @CODE@ = Right part of paired symbols

!! The verbs are syntactically split according to transitivity:
+TV !!= * @CODE@
+IV !!= * @CODE@

!! Special multiword units are analysed with:
 +Multi !!= * @CODE@

!! Non-dictionary words can be recognised with:
 +Guess !!= * @CODE@

%>


!! !!Flag diacritics
!! We have manually optimised the structure of our lexicon using following
!! flag diacritics to restrict morhpological combinatorics - only allow compounds
!! with verbs if the verb is further derived into a noun again:
 @P.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @D.NeedNoun.ON@    !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
 @C.NeedNoun@       !!≈ | @CODE@ | (Dis)allow compounds with verbs unless nominalised
!! 
!! For languages that allow compounding, the following flag diacritics are needed
!! to control position-based compounding restrictions for nominals. Their use is
!! handled automatically if combined with +CmpN/xxx tags. If not used, they will
!! do no harm.
 @P.CmpFrst.FALSE@ !!≈ | @CODE@ | Require that words tagged as such only appear first
 @D.CmpLast.TRUE@  !!≈ | @CODE@ | Block such words from entering R
 @D.CmpNone.TRUE@  !!≈ | @CODE@ | Combines with the next tag to prohibit compounding
 @U.CmpNone.FALSE@ !!≈ | @CODE@ | Combines with the prev tag to prohibit compounding
!! 
!! Use the following flag diacritics to control downcasing of derived proper
!! nouns (e.g. Finnish Pariisi -> pariisilainen). See e.g. North Sámi for how to use
!! these flags. There exists a ready-made regex that will do the actual down-casing
!! given the proper use of these flags.
 @U.Cap.Obl@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.
 @U.Cap.Opt@        !!≈ | @CODE@ | Allowing downcasing of derived names: deatnulasj.

LEXICON Root
!! The word forms in Haida start from the lexeme roots of basic
!! word classes, or optionally from prefixes:
!   Prefixes    ;
!   Nouns   ;
  Verbs   ;    !!= * @CODE@
!   Adjectives  ;
!   Pronouns    ;
!   Numerals    ;
!   Postpositions ;
!   Particles ;


